#include <stdio.h>
#include <stdlib.h>
#include "trajet.h"
#include "avl.c"

void parcoursInfixe(Noeud *racine) {
    if (racine != NULL) {
        parcoursInfixe(racine->gauche);
        printf("ID: %d, Ville: %s\n", racine->trajet.id, racine->trajet.ville);
        parcoursInfixe(racine->droite);
    }
}

typedef struct {
    Etape a;
    struct AVLNode *left;
    struct AVLNode *right;
    int height;
} AVLville;

// Structure pour représenter une étape
typedef struct {
    int id_trajet;
    char ville_depart[50];
    char ville_arrivee[50];
} Etape;

// Structure pour représenter une ville avec le nombre de trajets total et le nombre de départs
typedef struct {
    char nom[50];
    int trajets_total;
    int departs;  // Modifié le type de booleen à int
} Ville;

// Structure pour représenter la distance d'une étape
typedef struct {
    int id_trajet;
    int id_etape;
    int distance;
} Distance;

// Fonction pour compter le nombre de nœuds dans un arbre AVL
int compterNoeuds(Noeud *racine) {
    if (racine == NULL) {
        return 0;
    }
    return 1 + compterNoeuds(racine->gauche) + compterNoeuds(racine->droite);
}

// ... Autres fonctions pour AVL, tri, etc.

int main(int argc, char *argv[]) {
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <option> <fichier.csv>\n", argv[0]);
        return 1;
    }

    char option = argv[1][0];
    char *fichier_csv = argv[2];

    if (option == 't') {
        FILE *fichier = fopen(fichier_csv, "r");
        if (fichier == NULL) {
            fprintf(stderr, "Erreur d'ouverture du fichier.\n");
            return 1;
        }
        Etape *p1 = NULL;
        int nombre_etapes = 0;
        while (fscanf(fichier, "%d,%49[^,],%49[^,],%d\n", &p1[nombre_etapes].id_trajet, p1[nombre_etapes].ville_depart, p1[nombre_etapes].ville_arrivee,
                      &p1[nombre_etapes].est_depart) == 4) {
            nombre_etapes++;
            p1 = realloc(p1, (nombre_etapes + 1) * sizeof(Etape));
            if (p1 == NULL) {
                fprintf(stderr, "Erreur d'allocation de mémoire.\n");
                return 1;
            }
        }
        for(i=0,i<nombre_etapes,i++){
            if(
        // Programme suite

        free(p1);  // Libérer la mémoire allouée
        fclose(fichier);  // Fermer le fichier
    } else if (option == 's') {
        FILE *fichier = fopen(fichier_csv, "r");
        if (fichier == NULL) {
            fprintf(stderr, "Erreur d'ouverture du fichier.\n");
            return 1;
        }
        Trajet *p1 = NULL;
        int nombre_trajets = 0;
        while (fscanf(fichier, "%d,%d,%d\n", &p1[nombre_trajets].id_trajet, &p1[nombre_trajets].id_etape, &p1[nombre_trajets].est_depart) == 3) {
            nombre_trajets++;
            p1 = realloc(p1, (nombre_trajets + 1) * sizeof(Trajet));
            if (p1 == NULL) {
                fprintf(stderr, "Erreur d'allocation de mémoire.\n");
                return 1;
            }
        }
        // Programme suite

        free(p1);  // Libérer la mémoire allouée
        fclose(fichier);  // Fermer le fichier
    } else {
        fprintf(stderr, "Option non reconnue.\n");
        return 1;
    }

    return 0;
}
