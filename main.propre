#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "trajet.h"
#include "avl.c"

int main(int argc, char *argv[]) {
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <option> <fichier.csv>\n", argv[0]);
        return 1;
    }

    char option = argv[1][0];
    char *fichier_csv = argv[2];

    if (option == 't') {
        FILE *fichier = fopen(fichier_csv, "r");
        if (fichier == NULL) {
            fprintf(stderr, "Erreur d'ouverture du fichier.\n");
            return 1;
        }
        Etape *p1 = NULL;
        int nombre_etapes = 0;
        while (fscanf(fichier, "%d,%49[^,],%49[^,]", &p1[nombre_etapes].id_trajet, p1[nombre_etapes].ville_depart, p1[nombre_etapes].ville_arrivee) == EOF) {
            nombre_etapes++;
            p1 = realloc(p1, (nombre_etapes + 1) * sizeof(Etape));
            if (p1 == NULL) {
                fprintf(stderr, "Erreur d'allocation de mémoire.\n");
                return 1;
            }
        }
        int a=1;
        int b=0;
        int i=0;
        int j=0;
        ville* pliste=NULL;
        for(int i = 0; i < nombre_etapes; i++) {
            AVLville *arbreVilleDepart = NULL;
            AVLville *arbreVilleArrivee = NULL;
            arbreVilleDepart = insert(arbreVilleDepart, p1[i].id_trajet, a);
            arbreVilleArrivee = insert(arbreVilleArrivee, p1[i].id_trajet, b);
            pliste = insertionville(pliste, arbreVilleDepart);
            pliste = insertionville(pliste, arbreVilleArrivee);
        }

        Ville* l1=NULL;
        int k=0;
        int l=0;
        
        while(pliste!=NULL){
            ville* tmp=pliste;
            k=compterNoeuds(pliste->ville);
            l=compterDépart(pliste->ville);
            l1=insert_stat(l1,pliste->ville,k,l);
            tmp=tmp->next;
        };
        Ville Top10[10];
        Ville* tmp1=NULL;
        tmp1=l1;
        for (int j=0;j<10;j++){
            strcpy(Top10[j].nom, tmp1->nom);
            Top10[j].departs=tmp1->departs;
            Top10[j].trajet_total=tmp1->trajet_total;
            tmp1=tmp1->next;
        };
        for(int i=0;i<10;i++){
            printf("nom de la ville : %s nombre de trajets : %d nombre de fois départ : %d", Top10[i].nom, Top10[i].trajet_total, Top10[i].departs);
        };
        desalouerVille(pliste);
        desalouerville(l1);
        free(p1);  // Libérer la mémoire allouée
        fclose(fichier);  // Fermer le fichier
}else if (option == 's') {
        FILE *fichier = fopen(fichier_csv, "r");
        if (fichier == NULL) {
            fprintf(stderr, "Erreur d'ouverture du fichier.\n");
            return 1;
        }

        distance *p1= NULL;
        int nombre_trajets = 0;
        while (fscanf(fichier, "%d,%f\n", &p1[nombre_trajets].id_trajet, &p1[nombre_trajets].distance) == 2) {
            nombre_trajets++;
            p1 = realloc(p1, (nombre_trajets + 1) * sizeof(distance));
            if (p1 == NULL) {
                fprintf(stderr, "Erreur d'allocation de mémoire.\n");
                return 1;
            }
        }

        trajet_stats* m = NULL;
        for (int i = 0; i < nombre_trajets; i++) {
            m = insertstat(m, p1,i);
        }

        AVLNode *ordre = NULL;
        trajet_stats *tmp = m;
        while (tmp != NULL) {
            ordre = insertAVL(ordre, tmp);
            tmp = tmp->next;
        }

        while (nombrechainon(ordre) > 50) {
            ordre = suppMin(ordre);
        }

        parcours(ordre);
        suppliste(m); // Libérer mémoire allouée à la liste

        while (nombrechainon(ordre) > 0) {
            ordre = suppMin(ordre);
        } // Supprimer l'AVL

        free(p1);      // Libérer la mémoire allouée
        fclose(fichier); // Fermer le fichier
} else {
        fprintf(stderr, "Option non reconnue.\n");
        return 1;
}
    return 0;
}
